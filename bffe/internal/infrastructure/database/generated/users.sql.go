// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const getUserUsername = `-- name: GetUserUsername :one
SELECT get_user_username($1) AS username
`

func (q *Queries) GetUserUsername(ctx context.Context, userName string) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserUsername, userName)
	var username string
	err := row.Scan(&username)
	return username, err
}

const registerUserAndGetId = `-- name: RegisterUserAndGetId :one
INSERT INTO bffe.users (
    first_name,
    middle_initial,
    surname,
    name_extension,
    username,
    password,
    security_stamp,
    concurrency_stamp,
    is_deleted,
    is_active,
    creation_time,
    last_modification_time,
    last_modifier_userid,
    deletion_time,
    deleter_userid
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10,
$11, $12, $13, $14, $15)
RETURNING id
`

type RegisterUserAndGetIdParams struct {
	FirstName            string
	MiddleInitial        sql.NullString
	Surname              string
	NameExtension        sql.NullString
	Username             string
	Password             string
	SecurityStamp        uuid.NullUUID
	ConcurrencyStamp     uuid.UUID
	IsDeleted            bool
	IsActive             bool
	CreationTime         time.Time
	LastModificationTime sql.NullTime
	LastModifierUserid   sql.NullInt32
	DeletionTime         sql.NullTime
	DeleterUserid        sql.NullInt32
}

func (q *Queries) RegisterUserAndGetId(ctx context.Context, arg RegisterUserAndGetIdParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, registerUserAndGetId,
		arg.FirstName,
		arg.MiddleInitial,
		arg.Surname,
		arg.NameExtension,
		arg.Username,
		arg.Password,
		arg.SecurityStamp,
		arg.ConcurrencyStamp,
		arg.IsDeleted,
		arg.IsActive,
		arg.CreationTime,
		arg.LastModificationTime,
		arg.LastModifierUserid,
		arg.DeletionTime,
		arg.DeleterUserid,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
